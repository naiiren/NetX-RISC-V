application rv32i;

import std.selector.*;
import std.memory.RegFile;

component core : [clk, rst, imemDataOut, dmemDataOut] -> [imemAddr, dmemAddr, dmemDataIn, dmemOp, dmemWe] {
    wire clk of clock();
    wire rst of bit(1);
    wire imemDataOut, dmemDataOut, dmemDataIn of bit(32);
    wire PC, nextPC, imemAddr, dmemAddr of bit(32);

    auto instr <> imemDataOut;
    auto func7 <> instr[31:25];
    auto rs2   <> instr[24:20];
    auto rs1   <> instr[19:15];
    auto func3 <> instr[14:12];
    auto rd    <> instr[11:7];
    auto op    <> instr[6:0];

    auto [extOP, regWr, branch_ctl, memToReg, dmemWe, dmemOp, aSrc, bSrc, ctl] <> InstrDecoder <> [op, func3, func7[5]];
    auto imm <> ImmSelector <> [extOP, instr];

    auto [Ra, Rb] <> RegFile(width=32, capacity=5, isPosEdge=false, isHighRst=true) <> {
        clk : clk, rst : rst, 
        wr_addr : rd, 
        rd_addr_a : rs1, rd_addr_b : rs2, 
        wr_en : AND <> [regWr, NOT <> EQ <> [rd, 5'b0]], 
        din : MUX(1) <> [memToReg, result, dmemDataOut]
    };

    auto [result, zero, less] <> ALU <> [
        MUX(1) <> [aSrc, Ra, PC],
        MUX(2) <> [bSrc, Rb, imm, 4, 4], ctl
    ];

    auto [PCAsrc, PCBsrc] <> BranchCond <> [branch_ctl, zero, less];

    nextPC <> ADD <> [
        MUX(1) <> [PCAsrc, 4, imm],
        MUX(1) <> [PCBsrc, PC, Ra]
    ];

    PC <> REGISTER(isPosEdge=false) <> [MUX(1) <> [rst, nextPC, 32'b0], clk];

    imemAddr <> MUX(1) <> [rst, nextPC, 32'b0];
    dmemAddr <> result;
    dmemDataIn <> Rb;
}

component InstrDecoder : [op_i, func3, func7] -> [extOP, regWr, branch_ctl, memToReg, memWr, memOP, aSrc, bSrc, ctl] {
    wire op_i  of bit(7);
    wire func3 of bit(3);
    wire func7 of bit(1);

    auto op <> op_i[6:2];
    auto U_flag_0 <> EQ <> [op, 5'b01101]; // lui
    auto U_flag_1 <> EQ <> [op, 5'b00101]; // auipc
    auto I_flag_0 <> EQ <> [op, 5'b00100]; // addi, slti, sltiu, xori, ori, andi, slli, srli, srai
    auto R_flag   <> EQ <> [op, 5'b01100]; // add, sub, sll, slt, sltu, xor, srl, sra, or, and
    auto J_flag   <> EQ <> [op, 5'b11011]; // jal
    auto I_flag_1 <> EQ <> [op, 5'b11001]; // jalr
    auto B_flag   <> EQ <> [op, 5'b11000]; // beq, bne, blt, bge, bltu, bgeu
    auto I_flag_2 <> EQ <> [op, 5'b00000]; // lb, lh, lw, lbu, lhu
    auto S_flag   <> EQ <> [op, 5'b01000]; // sb, sh, sw

    auto U_flag <> OR <> [U_flag_0, U_flag_1];
    auto I_flag <> OR(3) <> [I_flag_0, I_flag_1, I_flag_2];

    let branch(cond, pred) = MUX(1) <> [cond, CAST <> 1'b0, pred];
    auto extOP <> OR(5) <> [
        branch(U_flag, 3'b001),
        branch(I_flag, 3'b000),
        branch(J_flag, 3'b100),
        branch(B_flag, 3'b011),
        branch(S_flag, 3'b010)
    ];
    
    auto regWr <> OR(4) <> [U_flag, I_flag, R_flag, J_flag];

    auto de_func3 <> DECODER(3) <> func3;
    auto branch_ctl <> OR(3) <> [
        branch(J_flag,   3'b001),
        branch(I_flag_1, 3'b010),
        branch(B_flag, OR(6) <> [
                branch(de_func3[3'b000], 3'b100), // beq
                branch(de_func3[3'b001], 3'b101), // bne
                branch(de_func3[3'b100], 3'b110), // blt
                branch(de_func3[3'b101], 3'b111), // bge
                branch(de_func3[3'b110], 3'b110), // bltu
                branch(de_func3[3'b111], 3'b111)  // bgeu
            ]
        )
    ];
    auto memToReg <> I_flag_2;
    auto memWr <> S_flag;
    auto memOP <> branch(OR <> [I_flag_2, S_flag], func3);
    auto aSrc <> OR(3) <> [U_flag_1, J_flag, I_flag_1];
    auto bSrc <> OR(3) <> [
        branch(OR(5) <> [U_flag_0, U_flag_1, I_flag_0, I_flag_2, S_flag], 2'b01),
        branch(OR <> [J_flag, I_flag_1], 2'b10),
        branch(OR <> [R_flag, B_flag], 2'b00)
    ];

    auto arith_ctl <> OR(8) <> [
        branch(de_func3[3'b000], CONCAT <> [AND <> [func7, R_flag], 3'b000]),
        branch(de_func3[3'b001], 4'b0001),
        branch(de_func3[3'b010], 4'b0010),
        branch(de_func3[3'b011], 4'b1010),
        branch(de_func3[3'b100], 4'b0100),
        branch(de_func3[3'b101], CONCAT <> [func7, 3'b101]),
        branch(de_func3[3'b110], 4'b0110),
        branch(de_func3[3'b111], 4'b0111)
    ];
    auto ctl <> OR(4) <> [
        branch(U_flag_0, 4'b0011),
        branch(OR <> [I_flag_0, R_flag], arith_ctl),
        branch(B_flag, MUX(1) <> [AND <> [func3[2], func3[1]], 4'b0010, 4'b1010]),
        branch(OR(5) <> [U_flag_1, J_flag, I_flag_1, I_flag_2, S_flag], 4'b0000)
    ];
}

component ImmSelector: [extOP, instr] -> [imm] {
    wire extOP of bit(3);
    wire instr of bit(32);
    wire imm   of bit(32);

    auto immI <> CAST(32) <> instr[31:20];
    auto immU <> CONCAT <> [instr[31:12], 12'b0];
    auto immS <> CAST(32) <> CONCAT <> [instr[31:25], instr[11:7]];
    auto immB <> CAST(32) <> CONCAT <> [instr[31], instr[7], instr[30:25], instr[11:8], 1'b0];
    auto immJ <> CAST(32) <> CONCAT <> [instr[31], instr[19:12], instr[20], instr[30:21], 1'b0];

    wire mask of bit(8);
    mask <> DECODER(3) <> extOP;
    let branch(i, pred) = MUX(1) <> [mask[i], CAST <> 1'b0, pred];
    imm <> OR(5) <> [
        branch(3'b000, immI), branch(3'b001, immU), 
        branch(3'b010, immS), branch(3'b011, immB), branch(3'b100, immJ)
    ];
}

component ALU: [a, b, ctl] -> [result, zero, less] {
    wire a, b       of bit(32);
    wire ctl        of bit(4);
    wire zero, less of bit(1);
    wire result     of bit(32);

    wire mask       of bit(8);
    mask <> DECODER(3) <> ctl[2:0];
    let branch(i, pred) = MUX(1) <> [mask[i], CAST <> 1'b0, pred];
    let sign_branch(b0, b1) = MUX(1) <> [ctl[3], b0, b1];
    result <> OR(8) <> [
        branch(3'b000, sign_branch(ADD <> [a, b], SUB <> [a, b])),
        branch(3'b001, SHL <> [a, b[4:0]]),
        branch(3'b010, CONCAT <> [31'b0, sign_branch(SLT <> [a, b], ULT <> [a, b])]),
        branch(3'b011, b),
        branch(3'b100, XOR <> [a, b]),
        branch(3'b101, sign_branch(LSHR <> [a, b[4:0]], ASHR <> [a, b[4:0]])),
        branch(3'b110, OR <> [a, b]),
        branch(3'b111, AND <> [a, b])
    ];

    zero <> MUX(1) <> [mask[3'b010],
        NOT <> OR(32) <> [result[i] | i in [0..32]],
        EQ <> [a, b]
    ];
    less <> result[0];
}

component BranchCond : [branch_ctl, zero, less] -> [PCAsrc, PCBsrc] {
    wire branch_ctl     of bit(3);
    wire zero, less     of bit(1);
    wire PCAsrc, PCBsrc of bit(1);

    auto mask <> DECODER(3) <> branch_ctl;
    let branch(i, pred) = MUX(1) <> [mask[i], CAST <> 1'b0, pred];
    auto result <> OR(7) <> [
        branch(3'b000, 2'b00),
        branch(3'b001, 2'b10),
        branch(3'b010, 2'b11),
        branch(3'b100, CONCAT <> [zero, 1'b0]),
        branch(3'b101, CONCAT <> [NOT <> zero, 1'b0]),
        branch(3'b110, CONCAT <> [less, 1'b0]),
        branch(3'b111, CONCAT <> [NOT <> less, 1'b0])
    ];
    PCAsrc <> result[1];
    PCBsrc <> result[0];
}